# -*- coding: utf-8 -*-
"""Disney tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9_igYc4rNjq8JjpCeB6zFsecAIRTfl0
"""

!pip install yfinance pandas matplotlib

import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

# Download Disney stock data
disney_stock = yf.download("DIS", start="2020-01-01", end="2024-02-23")

# Display the first few rows of the data
print(disney_stock.head())

# Plot the adjusted closing price
plt.figure(figsize=(10, 6))
plt.plot(disney_stock['Adj Close'], label='Disney Stock Price')
plt.title('Disney Stock Price Over Time')
plt.xlabel('Date')
plt.ylabel('Stock Price (USD)')
plt.legend()
plt.show()

import yfinance as yf
import matplotlib.pyplot as plt

def analyze_stock_performance(ticker, start_date, end_date):
    # Fetch historical stock data
    stock_data = yf.download(ticker, start=start_date, end=end_date)

    # Plotting stock closing prices
    plt.figure(figsize=(10, 6))
    plt.plot(stock_data['Close'], label=f'{ticker} Closing Price')
    plt.title(f'{ticker} Stock Performance ({start_date} to {end_date})')
    plt.xlabel('Date')
    plt.ylabel('Stock Price (USD)')
    plt.legend()
    plt.show()

    # Calculate key metrics
    daily_returns = stock_data['Close'].pct_change()
    cumulative_returns = (1 + daily_returns).cumprod() - 1

    # Plotting cumulative returns
    plt.figure(figsize=(10, 6))
    plt.plot(cumulative_returns, label=f'{ticker} Cumulative Returns')
    plt.title(f'{ticker} Cumulative Returns ({start_date} to {end_date})')
    plt.xlabel('Date')
    plt.ylabel('Cumulative Returns')
    plt.legend()
    plt.show()

# Example: Analyzing Disney stock performance for the past year
ticker_symbol = 'DIS'
start_date_short_term = '2023-02-01'
end_date_short_term = '2024-03-01'


analyze_stock_performance(ticker_symbol, start_date_short_term, end_date_short_term)

# Install necessary libraries
!pip install yfinance matplotlib

import yfinance as yf
import matplotlib.pyplot as plt

def plot_daily_returns_scatter(ticker, start_date, end_date):
    # Fetch historical stock data
    stock_data = yf.download(ticker, start=start_date, end=end_date)

    # Calculate daily returns
    daily_returns = stock_data['Close'].pct_change()

    # Plotting daily returns as a scatter plot
    plt.figure(figsize=(12, 6))
    plt.scatter(daily_returns.index, daily_returns, color='blue', label=f'{ticker} Daily Returns')
    plt.title(f'{ticker} Daily Returns (Scatter Plot) - {start_date} to {end_date}')
    plt.xlabel('Date')
    plt.ylabel('Daily Returns')
    plt.axhline(0, color='black', linestyle='--', linewidth=1, label='Zero Returns')
    plt.legend()
    plt.show()

# Example: Displaying Netflix daily returns as a scatter plot from 2023-03-01 to 2024-03-01
ticker_symbol = 'NFLX'
start_date = '2023-03-01'
end_date = '2024-03-01'

plot_daily_returns_scatter(ticker_symbol, start_date, end_date)